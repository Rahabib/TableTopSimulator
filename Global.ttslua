--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]
--[[ The onLoad event is called after the game save finishes loading. --]]

-- init vals
local dieWatch = {
    White = { D10 = false, D100 = false },
    Brown = { D10 = false, D100 = false },
    Red = { D10 = false, D100 = false },
    Orange = { D10 = false, D100 = false },
    Yellow = { D10 = false, D100 = false },    
    Green = { D10 = false, D100 = false },
    Teal = { D10 = false, D100 = false },
    Blue = { D10 = false, D100 = false },
    Purple = { D10 = false, D100 = false },
    Pink = { D10 = false, D100 = false },
    Grey = { D10 = false, D100 = false }, -- spectators
    Black = { D10 = false, D100 = false } -- GM/DM
}
local playerData = {}

function onLoad()
    -- downloadData()
    -- createCharacterSheet()
    createMat()
end

function createMat()
    mat = spawnObject({
        type = 'Custom_Tile',
        position = {0, 0.96, 0},
        rotation = {0, 0, 0},
        scale = {16.5, 1, 18},
        sound = false,
        snap_to_grid = false
    })
        
    mat.setCustomObject({
        image = "https://i.imgur.com/N0O6aqj.jpg",
        type = '0',
        thickness = '0.10'
    })
    
    mat.setLock(true)	
end

function onObjectRandomize(object, player_color)
    -- get values object properties for dieWatch
    local die = object.getName()
    local guid = object.getGUID()
    
    -- if dice is not already in randomization process (prevents multiple broadcasts)
    if not dieWatch[player_color][die] then
        
        dieWatch[player_color][die] = guid -- set diewatch to guid of die
        
        -- wait for dice to be resting
        local rollWatch = function() 
            dee10 = dieWatch[player_color].D10
            dee100 = dieWatch[player_color].D100
            if(dee10 != false and dee100 != false) then
                dd10 = getObjectFromGUID(dee10)
                dd100 = getObjectFromGUID(dee100)
                if(dd100.resting == true and dd10.resting == true) then
                    return true
                else
                    return false
                end
            else
                return false
            end
        end
        
        -- roll has ended, get values and broadcast
        local rollEnd = function() 
            if (dieWatch[player_color].D100 != false and dieWatch[player_color].D10 != false) then
                local d10 = getObjectFromGUID(dieWatch[player_color].D10)
                local d100 = getObjectFromGUID(dieWatch[player_color].D100)
                d10Result = d10.getRotationValue()
                d100Result = d100.getRotationValue()
                result = d100Result + d10Result
                local commentary = ""
                if(result > 96) then
                    commentary = " Critical! "
                end
                if(result < 08) then
                    commentary = " Possible Fumble! "
                end
                if(result == 0) then
                    result = 100
                    commentary = " PERFECTION!!! "
                end
                -- local calculatedRoll = result + playerData.sulime[playerData.sulime["obtype"]] -- TODO: replace with skill once it can be determined
                local calculatedRoll = result -- TODO: replace with skill once it can be determined
                -- broadcastToAll(Player[player_color].steam_name .. ' rolls: ' .. commentary .. result .. '+ OB Modifier (' .. playerData.sulime[playerData.sulime["obtype"]] .. ') = ' .. calculatedRoll, player_color)
                broadcastToAll(Player[player_color].steam_name .. ' rolls: ' .. commentary .. " " .. calculatedRoll, player_color)
                dieWatch[player_color].D10 = false
                dieWatch[player_color].D100 = false
            end
        end
        
        -- Wait for rollWatch to be true then exec rollEnd
        Wait.condition(rollEnd, rollWatch)
        
    end -- end dieWatch --
end

-- manually redownload data
function onScriptingButtonUp(index, player_color)
    if (index == 9) then
        local url = getPlayerNote(player_color)
        downloadData(url)
    else
        createCharacterSheet(player_color)
    end
end

function getPlayerNote(player_color)
    local notes = getNotebookTabs()
    for i, t in ipairs(notes) do
        if(t.color == player_color and t.title == player_color) then
            return t.body
        end
    end
end

function checkCharacterSheetNote(player_color, steam_name)
    local notes = getNotebookTabs()
    local notecheck = false
    for i, t in ipairs(notes) do
        if(t.color == player_color and t.title == steam_name) then
            notecheck = true
        end
    end
    return notecheck
end

function createCharacterSheet(player_color)
    local playerSheet = JSON.encode_pretty(playerData.sulime)
    parameters = {
        title = Player[player_color].steam_name,
        body = playerSheet,
        color = player_color
    }
    if(checkCharacterSheetNote(player_color, Player[player_color].steam_name) == false) then
        Notes.addNotebookTab(parameters)    
    else
        Notes.editNotebookTab(parameters)
    end
    print("playerSheet Created")
end

function downloadData(url)
    print("downloading data")
    -- url = "https://spreadsheets.google.com/feeds/cells/1lSgk-97LoCgOCiTWDOogWreuyg8F3wGgGMqfGMbEq7g/1/public/full?alt=json"
    WebRequest.get(
        url, 
        function(a)
            json = JSON.decode(a.text)
            processSS(json)
        end
    )
end

function processSS(json)
    local data = json.feed["entry"]
    local character = ""
    local keyMap = {}
    print("data download complete")
    print("processing data")
    for k,v in pairs(data) do 
        if(tonumber(v["gs$cell"].row) == 1) then -- creat keymapping
            if(tonumber(v["gs$cell"].col) != 1) then -- first col is characters, we dont store that key as its a table
                map = tonumber(v["gs$cell"].col)
                key = v["gs$cell"]["$t"]:gsub('%s+', ''):lower()
                keyMap[map] = key
            end
        else
            if(tonumber(v["gs$cell"].col) == 1) then -- first col is characters, we dont store that key as its a table
                character = v["gs$cell"]["$t"]:gsub('%s+', ''):lower()
                playerData[character] = {}
            else
                index = tonumber(v["gs$cell"].col)
                local thiskey = keyMap[index]
                playerData[character][thiskey] = v["gs$cell"]["$t"]:gsub('%s+', ''):lower()
            end
        end
    end
    print("processing complete")
    -- print(playerData.sulime["obtype"])
    -- print("my attack bonus is: " .. playerData.sulime[playerData.sulime["obtype"]])
end

-- developer functions
function printTable(a)
    for i,line in ipairs(a) do
        print(a)
    end
end
